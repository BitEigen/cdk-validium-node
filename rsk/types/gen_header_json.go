// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h RskHeader) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash                common.Hash    `json:"parentHash"                 gencodec:"required"`
		UncleHash                 common.Hash    `json:"sha3Uncles"                 gencodec:"required"`
		Coinbase                  common.Address `json:"miner"`
		Root                      common.Hash    `json:"stateRoot"                  gencodec:"required"`
		TxHash                    common.Hash    `json:"transactionsRoot"           gencodec:"required"`
		ReceiptHash               common.Hash    `json:"receiptsRoot"               gencodec:"required"`
		Bloom                     Bloom          `json:"logsBloom"                  gencodec:"required"`
		Difficulty                *hexutil.Big   `json:"difficulty"                 gencodec:"required"`
		Number                    *hexutil.Big   `json:"number"                     gencodec:"required"`
		GasLimit                  hexutil.Uint64 `json:"gasLimit"                   gencodec:"required"`
		GasUsed                   hexutil.Uint64 `json:"gasUsed"                    gencodec:"required"`
		Time                      hexutil.Uint64 `json:"timestamp"                  gencodec:"required"`
		Extra                     hexutil.Bytes  `json:"extraData"                  gencodec:"required"`
		PaidFees                  *hexutil.Big   `json:"paidFees"                   gencodec:"required"`
		MinimumGasPrice           hexutil.Uint64 `json:"minimumGasPrice"            gencodec:"required"`
		Uncles                    []string       `json:"uncles"                                             rlp:"-"`
		UncleCount                uint64         `json:"uncleCount"`
		UmmRoot                   []byte         `json:"ummRoot"`
		BitcoinMergedMiningHeader hexutil.Bytes  `json:"bitcoinMergedMiningHeader"  gencodec:"required"`
		OriginalHash              common.Hash    `json:"hash"                       gencodec:"required"     rlp:"-"`
		Hash                      common.Hash    `json:"hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.UncleHash = h.UncleHash
	enc.Coinbase = h.Coinbase
	enc.Root = h.Root
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Difficulty = (*hexutil.Big)(h.Difficulty)
	enc.Number = (*hexutil.Big)(h.Number)
	enc.GasLimit = hexutil.Uint64(h.GasLimit)
	enc.GasUsed = hexutil.Uint64(h.GasUsed)
	enc.Time = hexutil.Uint64(h.Time)
	enc.Extra = h.Extra
	enc.PaidFees = (*hexutil.Big)(h.PaidFees)
	enc.MinimumGasPrice = hexutil.Uint64(h.MinimumGasPrice)
	enc.Uncles = h.Uncles
	enc.UncleCount = h.UncleCount
	enc.UmmRoot = h.UmmRoot
	enc.BitcoinMergedMiningHeader = h.BitcoinMergedMiningHeader
	enc.OriginalHash = h.OriginalHash
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *RskHeader) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash                *common.Hash    `json:"parentHash"                 gencodec:"required"`
		UncleHash                 *common.Hash    `json:"sha3Uncles"                 gencodec:"required"`
		Coinbase                  *common.Address `json:"miner"`
		Root                      *common.Hash    `json:"stateRoot"                  gencodec:"required"`
		TxHash                    *common.Hash    `json:"transactionsRoot"           gencodec:"required"`
		ReceiptHash               *common.Hash    `json:"receiptsRoot"               gencodec:"required"`
		Bloom                     *Bloom          `json:"logsBloom"                  gencodec:"required"`
		Difficulty                *hexutil.Big    `json:"difficulty"                 gencodec:"required"`
		Number                    *hexutil.Big    `json:"number"                     gencodec:"required"`
		GasLimit                  *hexutil.Uint64 `json:"gasLimit"                   gencodec:"required"`
		GasUsed                   *hexutil.Uint64 `json:"gasUsed"                    gencodec:"required"`
		Time                      *hexutil.Uint64 `json:"timestamp"                  gencodec:"required"`
		Extra                     *hexutil.Bytes  `json:"extraData"                  gencodec:"required"`
		PaidFees                  *hexutil.Big    `json:"paidFees"                   gencodec:"required"`
		MinimumGasPrice           *hexutil.Uint64 `json:"minimumGasPrice"            gencodec:"required"`
		Uncles                    []string        `json:"uncles"                                             rlp:"-"`
		UncleCount                *uint64         `json:"uncleCount"`
		UmmRoot                   []byte          `json:"ummRoot"`
		BitcoinMergedMiningHeader *hexutil.Bytes  `json:"bitcoinMergedMiningHeader"  gencodec:"required"`
		OriginalHash              *common.Hash    `json:"hash"                       gencodec:"required"     rlp:"-"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.UncleHash == nil {
		return errors.New("missing required field 'sha3Uncles' for Header")
	}
	h.UncleHash = *dec.UncleHash
	if dec.Coinbase != nil {
		h.Coinbase = *dec.Coinbase
	}
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Header")
	}
	h.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Header")
	}
	h.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Header")
	}
	h.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = uint64(*dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra
	if dec.PaidFees == nil {
		return errors.New("missing required field 'paidFees' for Header")
	}
	h.PaidFees = (*big.Int)(dec.PaidFees)
	if dec.MinimumGasPrice == nil {
		return errors.New("missing required field 'minimumGasPrice' for Header")
	}
	h.MinimumGasPrice = uint64(*dec.MinimumGasPrice)
	if dec.Uncles != nil {
		h.Uncles = dec.Uncles
	}
	if dec.UncleCount != nil {
		h.UncleCount = *dec.UncleCount
	}
	if dec.UmmRoot != nil {
		h.UmmRoot = dec.UmmRoot
	}
	if dec.BitcoinMergedMiningHeader == nil {
		return errors.New("missing required field 'bitcoinMergedMiningHeader' for Header")
	}
	h.BitcoinMergedMiningHeader = *dec.BitcoinMergedMiningHeader
	if dec.OriginalHash == nil {
		return errors.New("missing required field 'hash' for Header")
	}
	h.OriginalHash = *dec.OriginalHash
	return nil
}
